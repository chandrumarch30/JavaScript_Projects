// ************************** FILE NAME : credit_card_checker_using_luhn_algo.js *************************************

// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8]
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9]
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6]
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5]
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6]

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5]
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3]
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4]
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5]
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4]

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4]
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9]
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3]
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3]
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3]

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5]

// Implementing Luhn's Algorithm for valid credit card check
/*The calculations in the Luhn algorithm can be broken down as the following steps:

Starting from the farthest digit to the right, AKA the check digit, iterate to the left.
As you iterate to the left, every other digit is doubled (the check digit is not doubled). If the number is greater than 9 after doubling, subtract 9 from its value.
Sum up all the digits in the credit card number.
If the sum modulo 10 is 0 (if the sum divided by 10 has a remainder of 0) then the number is valid, otherwise, itâ€™s invalid.*/

const validateCred = array =>{
  let dummyArray =[];
  let sum = 0;
  let doubleVal =[];
  let isSwitch = false;
  for(let i=array.length-1; i >=0; i--){
    doubleVal = array[i];
    if(isSwitch){
      doubleVal = array[i] * 2;
      if(doubleVal > 9)
        doubleVal -= 9;
    }
    dummyArray[i] = doubleVal;
    isSwitch = !isSwitch;
  }

  for(let i=0; i<dummyArray.length; i++){
    sum = sum+ dummyArray[i];
  }
    //console.log(sum);
  if(sum%10 === 0){
    return true;
  }
  else{
    return false;
  }

}

// idInvalidCardCompanies() will list unique invalid companies as per start digit of the card numbers of invalid digits

const idInvalidCardCompanies = invalidCardNo => {
  let invalidCardCompanies = [];
  for(let i=0; i<=invalidCardNo.length-1;i++){
    switch (invalidCardNo[i][0]) {
      case 3:
        if(invalidCardCompanies.indexOf("Amex (American Express)")== -1)
          invalidCardCompanies.push("Amex (American Express)");
        break;
      case 4:
        if(invalidCardCompanies.indexOf("Visa")== -1)
          invalidCardCompanies.push("Visa");
        break;
      case 5:
        if(invalidCardCompanies.indexOf("MasterCard")== -1)
          invalidCardCompanies.push("MasterCard");
        break;
      case 6:
        if(invalidCardCompanies.indexOf("Discover")== -1)
          invalidCardCompanies.push("Discover");
        break;
      default:
        if(invalidCardCompanies.indexOf("Company not found")== -1)
          invalidCardCompanies.push("Company not found");
    }
  }
  console.log(invalidCardCompanies);
}

// Parsing the batch array in this findInvalidCards() to check which numbers are invalid and store them in invalidCards[] array, which we will process to identify corresponding credit card companies
const findInvalidCards = cardNo => {
  let invalidCards =[];
  for(let i=0; i<=cardNo.length-1; i++){
    if(!validateCred(cardNo[i])){
      //console.log("Entering");
      invalidCards.push(cardNo[i]);
    }
  }
//  console.log(invalidCards);
  idInvalidCardCompanies(invalidCards);
}



findInvalidCards(batch);
